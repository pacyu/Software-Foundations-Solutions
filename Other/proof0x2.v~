Inductive N : Type :=
| O : N
| S : N -> N.

Fixpoint plus (x y : N) : N :=
  match x with
  | O => y
  | S x' => S (plus x' y)
  end.

Print plus.

Lemma plus_zero (x : N) : plus x O = x.

Proof.
  induction x.
  - simpl. reflexivity.
  - simpl. rewrite IHx. reflexivity.
Qed.

Lemma plus_S (x y : N) : plus x (S y) = S (plus x y).

Proof.
  induction x.
  - simpl. reflexivity.
  - simpl. rewrite IHx. reflexivity.
Qed.

Lemma plus_comm (x y : N) : plus x y = plus y x.

Proof.
  induction x.
  - simpl. rewrite plus_zero. reflexivity.
  - simpl. rewrite IHx. rewrite plus_S. reflexivity.
Qed.
